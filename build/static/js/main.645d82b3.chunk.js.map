{"version":3,"sources":["Components/NewsFeed/NewsArticle/NewsArticle.js","Components/NewsFeed/NewsFeed.js","secret.js","Components/Header/Header.js","Components/Footer/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["NewsArticle","topic","location","concat","window","open","article","_this","this","react_default","a","createElement","props","name","title","description","className","onClick","researchTopic","seeArticlePage","url","Component","NewsFeed","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","getNews","bind","assertThisInitialized","_this2","urlString","$","ajax","success","searchResults","results","articles","newsRows","forEach","index","newsRow","key","publishedAt","NewsArticle_NewsArticle_NewsArticle","source","length","push","setState","rows","error","xhr","status","err","console","Header","Footer","href","App","Components_Header_Header","Components_NewsFeed_NewsFeed","Components_Footer_Footer","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.645d82b3.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport './NewsArticle.css'\r\n\r\nexport default class NewsArticle extends Component {\r\n  researchTopic(topic) {\r\n    var location = `http://www.google.com/search?hl=en&source=hp&q=${topic}&aq=f&oq=&aqi=`\r\n    window.open(location, '_blank')\r\n  }\r\n\r\n  seeArticlePage(article) {\r\n    window.open(article, '_blank')\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>{this.props.name}</h3>\r\n        <h4>{this.props.title}</h4>\r\n        <p>{this.props.description}</p>\r\n        <button\r\n          className=\"researchBtn\"\r\n          onClick={() => {\r\n            this.researchTopic(this.props.title)\r\n          }}\r\n        >\r\n          Research Topic\r\n        </button>\r\n        <button\r\n          className=\"articleBtn\"\r\n          onClick={() => this.seeArticlePage(this.props.url)}\r\n        >\r\n          To Article\r\n        </button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport WEATHER_API_KEY from '../../secret'\r\nimport $ from 'jquery'\r\nimport './NewsFeed.css'\r\nimport NewsArticle from './NewsArticle/NewsArticle'\r\n\r\nclass NewsFeed extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {}\r\n    this.getNews = this.getNews.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getNews()\r\n  }\r\n\r\n  getNews() {\r\n    const API_KEY = WEATHER_API_KEY\r\n    const urlString = `https://newsapi.org/v2/top-headlines?country=us&apiKey=${API_KEY}`\r\n    $.ajax({\r\n      url: urlString,\r\n      success: searchResults => {\r\n        const results = searchResults.articles\r\n        var newsRows = []\r\n\r\n        results.forEach((article, index) => {\r\n          const newsRow = (\r\n            <div key={article.publishedAt} className=\"newsRow\">\r\n              <NewsArticle\r\n                name={article.source.name}\r\n                title={article.title}\r\n                description={article.description}\r\n                url={article.url}\r\n              />\r\n              {index !== results.length - 1 ? <hr /> : null}\r\n            </div>\r\n          )\r\n          newsRows.push(newsRow)\r\n        })\r\n        this.setState({ rows: newsRows })\r\n      },\r\n      error: (xhr, status, err) => {\r\n        console.error('Error fetching data')\r\n      }\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return <div>{this.state.rows}</div>\r\n  }\r\n}\r\n\r\nexport default NewsFeed\r\n","const WEATHER_API_KEY = '84145fe9236e4573824511f495ab8126'\r\nexport default WEATHER_API_KEY\r\n","import React, { Component } from 'react'\r\nimport './Header.css'\r\n\r\nclass Header extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <p>Aggregate News</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Header\r\n","import React, { Component } from 'react'\r\nimport './footer.css'\r\n\r\nclass Footer extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <p>\r\n          Powered by{' '}\r\n          <a className=\"newsApi\" href=\"https://newsapi.org/\">\r\n            newsapi.org\r\n          </a>{' '}\r\n          and{' '}\r\n          <a className=\"github\" href=\"https://github.com/TS22082/your_news\">\r\n            open sourced\r\n          </a>\r\n        </p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Footer\r\n","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport NewsFeed from './Components/NewsFeed/NewsFeed'\r\nimport Header from './Components/Header/Header'\r\nimport Footer from './Components/Footer/Footer'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <NewsFeed />\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}